# ‡πÇ‡∏à‡∏ó‡∏¢‡πå: ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‚Üí ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ *
full_name = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ")         # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô "John Doe"
upper_name = full_name.upper()                      # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‚Üí "JOHN DOE"
formatted_name = upper_name.replace(" ", "*")       # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ * ‚Üí "JOHN*DOE"
print("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", formatted_name)                  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå


# ‡πÇ‡∏à‡∏ó‡∏¢‡πå: ‡πÉ‡∏ä‡πâ while loop ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡πÄ‡∏à‡∏≠ -1 ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°
total = 0                                           # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°
while True:                                         # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö
    num = int(input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (-1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î): "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if num == -1:                                   # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô -1 ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
        break
    total += num                                    # ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏£‡∏ß‡∏°
print("‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏≠:", total)         # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°



# ‡πÇ‡∏à‡∏ó‡∏¢‡πå: ‡∏£‡∏±‡∏ö list ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
def find_max(numbers):                              # ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    max_value = numbers[0]                          # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    for num in numbers:                             # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÉ‡∏ô list
        if num > max_value:                         # ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            max_value = num                         # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
    return max_value                                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
sample_list = [10, 25, 3, 99, 42]
print("‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠:", find_max(sample_list))   # Output: 99



# ‡πÇ‡∏à‡∏ó‡∏¢‡πå: ‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å list 2D
def longest_unique_word_sequence(words_2d):         # ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    all_words = []                                  # ‡∏£‡∏ß‡∏° list 2D ‡πÄ‡∏õ‡πá‡∏ô 1D
    for sublist in words_2d:
        for word in sublist:
            all_words.append(word)

    max_length = 0                                  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    results = []                                    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

    for start in range(len(all_words)):             # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á
        used_words = []                             # list ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        for end in range(start, len(all_words)):    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ä‡πà‡∏ß‡∏á
            word = all_words[end]
            if word in used_words:                  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ã‡πâ‡∏≥
                break
            used_words.append(word)
        if len(used_words) > max_length:            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            max_length = len(used_words)
            results = [used_words]
        elif len(used_words) == max_length:         # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            results.append(used_words)

    return max_length, results                      # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏≥

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
sample_words = [["cat", "dog"], ["dog", "fish", "cat"], ["bird"]]
length, sequences = longest_unique_word_sequence(sample_words)
print("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:", length)
print("‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥:", sequences)




# üîπ ‡∏´‡∏°‡∏ß‡∏î String & Formatting

def format_strings(*args):  # ‡∏Ç‡πâ‡∏≠ 1: ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‚Üí ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‚Üí ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ "-"
    combined = ''.join(args)  # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    uppercased = combined.upper()  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
    formatted = uppercased.replace(' ', '-')  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ "-"
    return formatted  # ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß

def reverse_string(s):  # ‡∏Ç‡πâ‡∏≠ 2: ‡∏£‡∏±‡∏ö string ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô string ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô
    return s[::-1]  # ‡πÉ‡∏ä‡πâ slicing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

def count_vowels(s):  # ‡∏Ç‡πâ‡∏≠ 3: ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏£‡∏∞‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (a, e, i, o, u)
    vowels = 'aeiouAEIOU'  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏£‡∏∞
    return sum(1 for char in s if char in vowels)  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏£‡∏∞

# üîπ ‡∏´‡∏°‡∏ß‡∏î Number & Math

def factorial(n):  # ‡∏Ç‡πâ‡∏≠ 4: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ n! ‡πÉ‡∏ä‡πâ loop
    result = 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà 1
    for i in range(1, n + 1):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å 1 ‡∏ñ‡∏∂‡∏á n
        result *= i  # ‡∏Ñ‡∏π‡∏ì‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    return result  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ factorial

def is_prime(n):  # ‡∏Ç‡πâ‡∏≠ 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ n ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if n < 2:  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        return False
    for i in range(2, int(n ** 0.5) + 1):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å 2 ‡∏ñ‡∏∂‡∏á sqrt(n)
        if n % i == 0:  # ‡∏ñ‡πâ‡∏≤ n ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ i ‡∏•‡∏á‡∏ï‡∏±‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            return False
    return True  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏£‡∏•‡∏á‡∏ï‡∏±‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞

def sum_even(n):  # ‡∏Ç‡πâ‡∏≠ 6: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà 1 ‡∏ñ‡∏∂‡∏á n
    return sum(i for i in range(2, n + 1, 2))  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤

def max3(a, b, c):  # ‡∏Ç‡πâ‡∏≠ 7: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô 3 ‡∏ï‡∏±‡∏ß
    return max(a, b, c)  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô max ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

def BMI(weight, height):  # ‡∏Ç‡πâ‡∏≠ 8: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ BMI ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÑ‡∏´‡∏ô
    bmi = weight / (height ** 2)  # ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
    if bmi < 18.5:
        return "Underweight"
    elif bmi < 25:
        return "Normal"
    elif bmi < 30:
        return "Overweight"
    else:
        return "Obese"

# üîπ ‡∏´‡∏°‡∏ß‡∏î Condition & Decision

def grade(score):  # ‡∏Ç‡πâ‡∏≠ 9: ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Å‡∏£‡∏î A‚ÄìF ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    if score >= 80:
        return 'A'
    elif score >= 70:
        return 'B'
    elif score >= 60:
        return 'C'
    elif score >= 50:
        return 'D'
    else:
        return 'F'

def login(user, password):  # ‡∏Ç‡πâ‡∏≠ 10: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password
    return user == "admin" and password == "1234"  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô

# üîπ ‡∏´‡∏°‡∏ß‡∏î Loop & Data Processing

def running_total(n):  # ‡∏Ç‡πâ‡∏≠ 11: ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏° 1 ‡∏ñ‡∏∂‡∏á n
    total = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    for i in range(1, n + 1):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å 1 ‡∏ñ‡∏∂‡∏á n
        total += i  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    return total  # ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏£‡∏ß‡∏°

def multiplication_table(n):  # ‡∏Ç‡πâ‡∏≠ 12: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç n
    table = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    for i in range(1, 13):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å 1 ‡∏ñ‡∏∂‡∏á 12
        table.append(f"{n} x {i} = {n * i}")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì‡∏•‡∏á‡πÉ‡∏ô list
    return table  # ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏°‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì

def longest_unique_word_sequence(words):  # ‡∏Ç‡πâ‡∏≠ 13: ‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å list 2D
    all_words = []  # ‡∏£‡∏ß‡∏° list 2D ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1D
    for sublist in words:
        for w in sublist:
            all_words.append(w)
    max_length = 0  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    results = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    for start in range(len(all_words)):  # ‡πÑ‡∏•‡πà‡∏î‡∏π‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å start
        used_words = []
        for end in range(start, len(all_words)):  # ‡πÑ‡∏•‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ã‡πâ‡∏≥
            word = all_words[end]
            if word in used_words:
                break
            used_words.append(word)
        if len(used_words) > max_length:  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÑ‡∏´‡∏°
            max_length = len(used_words)
            results = [used_words]
        elif len(used_words) == max_length:
            results.append(used_words)
    return max_length, results  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥

def atm_system():  # ‡∏Ç‡πâ‡∏≠ 14: ‡πÄ‡∏°‡∏ô‡∏π ‡∏ù‡∏≤‡∏Å / ‡∏ñ‡∏≠‡∏ô / ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î / ‡∏≠‡∏≠‡∏Å
    balance = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    while True:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å
        print("\nATM Menu:\n1.Deposit\n2.Withdraw\n3.Check Balance\n0.Exit")
        choice = input("Enter choice: ")
        if choice == '1':
            amount = float(input("Enter amount to deposit: "))
            balance += amount
        elif choice == '2':
            amount = float(input("Enter amount to withdraw: "))
            if amount <= balance:
                balance -= amount
            else:
                print("Insufficient funds.")
        elif choice == '3':
            print(f"Current balance: {balance}")
        elif choice == '0':
            break
        else:
            print("Invalid choice.")

def menu_order():  # ‡∏Ç‡πâ‡∏≠ 15: ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏î 0
    menu = {'1': ('Pizza', 100), '2': ('Burger', 80), '3': ('Salad', 60)}
    total = 0
    while True:
        print("\nMenu:\n1.Pizza\n2.Burger\n3.Salad\n0.Exit")
        choice = input("Enter your choice: ")
        if choice == '0':
            break
        elif choice in menu:
            total += menu[choice][1]
            print(f"Added {menu[choice][0]} - {menu[choice][1]} Baht")
        else:
            print("Invalid choice.")
    print(f"Total price: {total} Baht")

# üîπ ‡∏´‡∏°‡∏ß‡∏î Hybrid (Function + Loop + Condition)

def password_strength(password):  # ‡∏Ç‡πâ‡∏≠ 16: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    has_lower = any(c.islower() for c in password)
    has_upper = any(c.isupper() for c in password)
    has_digit = any(c.isdigit() for c in password)
    if has_lower and has_upper and has_digit:
        return "Strong password"
    else:
        return "Weak password"

def palindrome(word):  # ‡∏Ç‡πâ‡∏≠ 17: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ word ‡πÄ‡∏õ‡πá‡∏ô palindrome ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return word == word[::-1]  # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô

def fibonacci(n):  # ‡∏Ç‡πâ‡∏≠ 18: ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ü‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏µ n ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    sequence = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö
    a, b = 0, 1  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    for _ in range(n):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ n ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        sequence.append(a)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ a ‡∏•‡∏á‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå
        a, b = b, a + b  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    return sequence  # ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ü‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏µ

def shopping_cart():  # ‡∏Ç‡πâ‡∏≠ 19: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    cart = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    while True:
        name = input("Enter product name (or 'done' to finish): ")
        if name.lower() == 'done':
            break
        price = float(input("Enter price: "))
        cart.append((name, price))
    total = sum(item[1] for item in cart)
    print(f"Total items: {len(cart)}")
    print(f"Total price: {total} Baht")

import random

def number_game():  # ‡∏Ç‡πâ‡∏≠ 20: ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç 1‚Äì100 ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏¢
    target = random.randint(1, 100)  # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    while True:
        guess = int(input("Guess the number (1-100): "))
        if guess < target:
            print("Too low.")
        elif guess > target:
            print("Too high.")
        else:
            print("Correct!")
            break









# ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏ß‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö Python ‡∏à‡∏≤‡∏Å Lecture 01‚Äì05 ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå
# ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 20 ‡∏Ç‡πâ‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

# üîπ Lecture 01‚Äì02: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
# ‡∏Ç‡πâ‡∏≠ 1: ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏° ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á ‡∏Ñ‡∏π‡∏ì ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏£
def basic_math_operations():
    a = int(input("Enter first number: "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    b = int(input("Enter second number: "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    print("Sum:", a + b)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°
    print("Difference:", a - b)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á
    print("Multiplication:", a * b)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏π‡∏ì
    print("Division:", a / b if b != 0 else "Cannot divide by zero")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏≤‡∏£ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏£‡∏®‡∏π‡∏ô‡∏¢‡πå)

# ‡∏Ç‡πâ‡∏≠ 2: ‡πÅ‡∏õ‡∏•‡∏á Celsius ‡πÄ‡∏õ‡πá‡∏ô Fahrenheit
def celsius_to_fahrenheit():
    celsius = float(input("Enter temperature in Celsius: "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ Celsius
    fahrenheit = (celsius * 9/5) + 32  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Fahrenheit
    print("Fahrenheit:", fahrenheit)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

# ‡∏Ç‡πâ‡∏≠ 3: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
def calculate_bmi():
    weight = float(input("Enter weight (kg): "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
    height = float(input("Enter height (m): "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á
    bmi = weight / (height ** 2)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
    print("BMI:", bmi)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ BMI

# ‡∏Ç‡πâ‡∏≠ 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏µ‡πà
def even_or_odd():
    n = int(input("Enter a number: "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    print("Even" if n % 2 == 0 else "Odd")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏µ‡πà

# üîπ Lecture 03: ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
# ‡∏Ç‡πâ‡∏≠ 5: ‡∏ï‡∏±‡∏î‡πÄ‡∏Å‡∏£‡∏î
def grade(score):
    if score >= 80:  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 80
        return "A"
    elif score >= 70:
        return "B"
    elif score >= 60:
        return "C"
    elif score >= 50:
        return "D"
    else:
        return "F"

# ‡∏Ç‡πâ‡∏≠ 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å/‡∏•‡∏ö/‡∏®‡∏π‡∏ô‡∏¢‡πå
def check_sign():
    x = float(input("Enter a number: "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if x > 0:
        print("Positive")  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
    elif x < 0:
        print("Negative")  # ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0
    else:
        print("Zero")  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0

# ‡∏Ç‡πâ‡∏≠ 7: login ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password
def login():
    user = input("Enter username: ")  # ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    password = input("Enter password: ")  # ‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if user == "admin" and password == "1234":  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        print("Login Success")
    else:
        print("Login Fail")

# üîπ Lecture 04: ‡∏•‡∏π‡∏õ
# ‡∏Ç‡πâ‡∏≠ 8: ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏° 1‚Äì100
def sum_1_to_100():
    total = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏ß‡∏°
    for i in range(1, 101):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 1 ‡∏ñ‡∏∂‡∏á 100
        total += i  # ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    print("Sum from 1 to 100:", total)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°

# ‡∏Ç‡πâ‡∏≠ 9: ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà 1‚Äìn
def sum_even(n):
    total = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏ß‡∏°
    for i in range(1, n+1):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 1 ‡∏ñ‡∏∂‡∏á n
        if i % 2 == 0:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà
            total += i  # ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    return total  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°

# ‡∏Ç‡πâ‡∏≠ 10: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡πÄ‡∏à‡∏≠ sentinel (-1)
def sentinel_sum():
    total = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏ß‡∏°
    while True:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö
        x = int(input("Enter number (-1 to stop): "))  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        if x == -1:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô sentinel
            break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏π‡∏õ
        total += x  # ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    print("Total:", total)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°

# ‡∏Ç‡πâ‡∏≠ 11: ‡πÅ‡∏°‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì (‡πÅ‡∏°‡πà 2‚Äì12)
def multiplication_tables():
    for i in range(2, 13):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏°‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì 2 ‡∏ñ‡∏∂‡∏á 12
        for j in range(1, 13):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì 1 ‡∏ñ‡∏∂‡∏á 12
            print(f"{i} x {j} = {i*j}")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏π‡∏ì

# ‡∏Ç‡πâ‡∏≠ 12: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
def is_prime(n):
    if n < 2:  # ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        return False
    for i in range(2, int(n ** 0.5) + 1):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏£
        if n % i == 0:  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏£‡∏•‡∏á‡∏ï‡∏±‡∏ß
            return False
    return True  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏£‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞

# üîπ Lecture 05: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
# ‡∏Ç‡πâ‡∏≠ 13: ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡πÉ‡∏ô 3 ‡∏ï‡∏±‡∏ß
def max3(a, b, c):
    if a >= b and a >= c:  # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö a ‡∏Å‡∏±‡∏ö b ‡πÅ‡∏•‡∏∞ c
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c

# ‡∏Ç‡πâ‡∏≠ 14: factorial ‡πÅ‡∏ö‡∏ö recursive
def factorial(n):
    if n == 0 or n == 1:  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ê‡∏≤‡∏ô
        return 1
    else:
        return n * factorial(n - 1)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

# ‡∏Ç‡πâ‡∏≠ 15: ‡∏£‡∏±‡∏ö string ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô string ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô
def reverse_string(s):
    return s[::-1]  # ‡πÉ‡∏ä‡πâ slicing ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô string

# ‡∏Ç‡πâ‡∏≠ 16: ‡πÇ‡∏ä‡∏ß‡πå local vs global variable
g = 10  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global
def show_scope():
    l = 5  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ local
    print("Local:", l)  # ‡πÅ‡∏™‡∏î‡∏á local
    print("Global:", g)  # ‡πÅ‡∏™‡∏î‡∏á global

# ‡∏Ç‡πâ‡∏≠ 17: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô BMI
def bmi(weight, height):
    return weight / (height ** 2)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI

# üîπ ‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô)
# ‡∏Ç‡πâ‡∏≠ 18: format_strings(*args)
def format_strings(*args):
    combined = ''.join(args)  # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    uppercased = combined.upper()  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
    formatted = uppercased.replace(' ', '-')  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ -
    return formatted  # ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

# ‡∏Ç‡πâ‡∏≠ 19: longest_unique_word_sequence
def longest_unique_word_sequence(words: list[list[str]]) -> tuple:
    all_words = []  # ‡∏£‡∏ß‡∏° list 2D ‡πÄ‡∏õ‡πá‡∏ô 1D
    for sublist in words:
        for w in sublist:
            all_words.append(w)
    max_length = 0  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    results = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    for start in range(len(all_words)):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á
        used_words = []  # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
        for end in range(start, len(all_words)):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ä‡πà‡∏ß‡∏á
            word = all_words[end]
            if word in used_words:  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ã‡πâ‡∏≥
                break
            used_words.append(word)
        if len(used_words) > max_length:  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            max_length = len(used_words)
            results = [used_words]
        elif len(used_words) == max_length:
            results.append(used_words)
    return max_length, results  # ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

# ‡∏Ç‡πâ‡∏≠ 20: ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ATM
def atm_system():
    balance = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    while True:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏°‡∏ô‡∏π
        print("\nATM Menu:\n1.Deposit\n2.Withdraw\n3.Check Balance\n0.Exit")
        choice = input("Enter choice: ")  # ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        if choice == '1':
            amount = float(input("Enter deposit amount: "))  # ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å
            balance += amount  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î
        elif choice == '2':
            amount = float(input("Enter withdraw amount: "))  # ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô
            if amount <= balance:
                balance -= amount  # ‡∏´‡∏±‡∏Å‡∏¢‡∏≠‡∏î
            else:
                print("Insufficient funds")  # ‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡πÑ‡∏°‡πà‡∏û‡∏≠
        elif choice == '3':
            print("Current Balance:", balance)  # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î
        elif choice == '0':
            break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        else:
            print("Invalid choice")  # ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

